// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/bluebosh/knap/pkg/apis/knap/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppengineLister helps list Appengines.
type AppengineLister interface {
	// List lists all Appengines in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Appengine, err error)
	// Appengines returns an object that can list and get Appengines.
	Appengines(namespace string) AppengineNamespaceLister
	AppengineListerExpansion
}

// appengineLister implements the AppengineLister interface.
type appengineLister struct {
	indexer cache.Indexer
}

// NewAppengineLister returns a new AppengineLister.
func NewAppengineLister(indexer cache.Indexer) AppengineLister {
	return &appengineLister{indexer: indexer}
}

// List lists all Appengines in the indexer.
func (s *appengineLister) List(selector labels.Selector) (ret []*v1alpha1.Appengine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Appengine))
	})
	return ret, err
}

// Appengines returns an object that can list and get Appengines.
func (s *appengineLister) Appengines(namespace string) AppengineNamespaceLister {
	return appengineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppengineNamespaceLister helps list and get Appengines.
type AppengineNamespaceLister interface {
	// List lists all Appengines in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Appengine, err error)
	// Get retrieves the Appengine from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Appengine, error)
	AppengineNamespaceListerExpansion
}

// appengineNamespaceLister implements the AppengineNamespaceLister
// interface.
type appengineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Appengines in the indexer for a given namespace.
func (s appengineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Appengine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Appengine))
	})
	return ret, err
}

// Get retrieves the Appengine from the indexer for a given namespace and name.
func (s appengineNamespaceLister) Get(name string) (*v1alpha1.Appengine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appengine"), name)
	}
	return obj.(*v1alpha1.Appengine), nil
}
